#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <addrspace.h>
#include <vm.h>

/*
 * Note! If OPT_DUMBVM is set, as is the case until you start the VM
 * assignment, this file is not compiled or linked or in any way
 * used. The cheesy hack versions in dumbvm.c are used instead.
 */


#include <thread.h>
#include <curthread.h>

#include <machine/spl.h>
#include <machine/tlb.h>

/*
 * Dumb MIPS-only "VM system" that is intended to only be just barely
 * enough to struggle off the ground. You should replace all of this
 * code while doing the VM assignment. In fact, starting in that
 * assignment, this file is not included in your kernel!
 */

/* under dumbvm, always have 48k of user stack */
#define DUMBVM_STACKPAGES    32

struct addrspace *
as_create(void)
{

	struct addrspace *as = kmalloc(sizeof(struct addrspace));
	if (as==NULL) {
		return NULL;
	}

	as->text.vbase = 0;
	as->text.pbase = 0;
	as->text.npages = 0;
	as->data.vbase = 0;
	as->data.pbase = 0;
	as->data.npages = 0;
	as->stack.pbase = 0;
	as->stack.vbase = 0;
	as->stack.npages = 0;
	as->heap.npages = 0;

	as->pageTable = array_create();

	return as;
}

int
as_copy(struct addrspace *old, struct addrspace **ret)
{


	struct addrspace *new;

	new = as_create();
	if (new==NULL) {
		return ENOMEM;
	}

	new->text.vbase = old->text.vbase;
	new->text.npages = old->text.npages;
	new->data.vbase = old->data.vbase;
	new->data.npages = old->data.npages;

	if (as_prepare_load(new)) {
		as_destroy(new);
		return ENOMEM;
	}

	// assert(new->text.pbase != 0);
	// assert(new->data.pbase != 0);
	// assert(new->stack.pbase != 0);

	memmove((void *)PADDR_TO_KVADDR(new->text.pbase),
		(const void *)PADDR_TO_KVADDR(old->text.pbase),
		old->text.npages*PAGE_SIZE);

	memmove((void *)PADDR_TO_KVADDR(new->data.pbase),
		(const void *)PADDR_TO_KVADDR(old->data.pbase),
		old->data.npages*PAGE_SIZE);

	memmove((void *)PADDR_TO_KVADDR(new->stack.pbase),
		(const void *)PADDR_TO_KVADDR(old->stack.pbase),
		DUMBVM_STACKPAGES*PAGE_SIZE);
	
	*ret = new;
	return 0;



	// struct addrspace *new;

	// new = as_create();
	// if (new==NULL) {
	// 	return ENOMEM;
	// }

	// new->text.vbase = old->text.vbase;
	// new->text.npages = old->text.npages;
	// new->data.vbase = old->data.vbase;
	// new->data.npages = old->data.npages;
	// new->heap.vbase = old->heap.vbase;
	// new->heapEnd = old->heapEnd;
	// new->stack.vbase = old->stack.vbase;


	// int i = 0;
	// struct page_entry *entry;

	// if (as_prepare_load(new)) {
	// 	as_destroy(new);
	// 	return ENOMEM;
	// }


	// assert(new->text.pbase != 0);
	// assert(new->data.pbase != 0);
	// // assert(new->stack.pbase != 0);

	// for (i; i < new->text.npages; i++){
	// 	entry = kmalloc(sizeof(struct page_entry));
	// 	entry->vAddr = new->text.vbase + (i * PAGE_SIZE);
	// 	entry->pAddr = new->text.pbase + (i * PAGE_SIZE);
	// 	entry->valid = 1;
	// 	array_add(new->pageTable, entry);
	// }


	// for (i = 0; i < new->data.npages; i++){
	// 	entry = kmalloc(sizeof(struct page_entry));
	// 	entry->vAddr = new->data.vbase + (i * PAGE_SIZE);
	// 	entry->pAddr = new->data.pbase + (i * PAGE_SIZE);
	// 	entry->valid = 1;
	// 	array_add(new->pageTable, entry);
	// }

	// new->stack.pbase = getppages(DUMBVM_STACKPAGES);
	// if (new->stack.pbase == 0) {
	// 	return ENOMEM;
	// }

	// for (i = 0; i < DUMBVM_STACKPAGES; i++){
	// 	entry = kmalloc(sizeof(struct page_entry));
	// 	entry->vAddr = USERSTACK + (i * PAGE_SIZE);
	// 	entry->pAddr = new->stack.pbase + (i * PAGE_SIZE);
	// 	entry->valid = 1;
	// 	array_add(new->pageTable, entry);
	// }

	// memmove((void *)PADDR_TO_KVADDR(new->text.pbase),
	// 	(const void *)PADDR_TO_KVADDR(old->text.pbase),
	// 	old->text.npages*PAGE_SIZE);

	// memmove((void *)PADDR_TO_KVADDR(new->data.pbase),
	// 	(const void *)PADDR_TO_KVADDR(old->data.pbase),
	// 	old->data.npages*PAGE_SIZE);

	// memmove((void *)PADDR_TO_KVADDR(new->stack.pbase),
	// 	(const void *)PADDR_TO_KVADDR(old->stack.pbase),
	// 	DUMBVM_STACKPAGES*PAGE_SIZE);
	
	// *ret = new;
	// return 0;
}
	 

void
as_destroy(struct addrspace *as)
{
	int i = 0;
	struct page_entry *entry;
	for (i; i < array_getnum(as->pageTable); i++){
		entry = array_getguy(as->pageTable, i);
		kfree(entry);
	}
	array_destroy(as->pageTable);

	kfree(as);
}

void
as_activate(struct addrspace *as)
{

	int i, spl;

	(void)as;

	spl = splhigh();

	for (i=0; i<NUM_TLB; i++) {
		TLB_Write(TLBHI_INVALID(i), TLBLO_INVALID(), i);
	}

	splx(spl);
}

/*
 * Set up a segment at virtual address VADDR of size MEMSIZE. The
 * segment in memory extends from VADDR up to (but not including)
 * VADDR+MEMSIZE.
 *
 * The READABLE, WRITEABLE, and EXECUTABLE flags are set if read,
 * write, or execute permission should be set on the segment. At the
 * moment, these are ignored. When you write the VM system, you may
 * want to implement them.
 */
int
as_define_region(struct addrspace *as, vaddr_t vaddr, size_t sz,
		 int readable, int writeable, int executable)
{

	size_t npages; 

	/* Align the region. First, the base... */
	sz += vaddr & ~(vaddr_t)PAGE_FRAME;
	vaddr &= PAGE_FRAME;

	/* ...and now the length. */
	sz = (sz + PAGE_SIZE - 1) & PAGE_FRAME;

	npages = sz / PAGE_SIZE;

	// We don't use these - all pages are read-write 
	(void)readable;
	(void)writeable;
	(void)executable;

	struct page_entry *entry;
	int i = 0;

	for (i = 0; i < npages; i++){
		entry = kmalloc(sizeof(struct page_entry));
		entry->vAddr = vaddr + i*PAGE_SIZE;
		entry->valid = 0;
		array_add(as->pageTable, entry);
	}

	if (as->text.vbase == 0) {
		as->text.vbase = vaddr;
		as->text.npages = npages;
		return 0;
	}

	if (as->data.vbase == 0) {
		as->data.vbase = vaddr;
		as->data.npages = npages;
		as->heap.vbase = (as->data.vbase & PAGE_FRAME) + (as->data.npages * PAGE_SIZE);
		as->heapEnd = as->heap.vbase;
		return 0;
	}

	/*
	 * Support for more than two regions is not available.
	 */
	kprintf("dumbvm: Warning: too many regions\n");
	return EUNIMP;
}


int
as_prepare_load(struct addrspace *as)
{

	assert(as->text.pbase == 0);
	assert(as->data.pbase == 0);
	assert(as->stack.pbase == 0);

	as->stack.vbase = USERSTACK;

	// as->text.pbase = getppages(as->text.npages);
	// if (as->text.pbase == 0) {
	// 	return ENOMEM;
	// }

	// as->data.pbase = getppages(as->data.npages);
	// if (as->data.pbase == 0) {
	// 	return ENOMEM;
	// }

	// as->stack.pbase = getppages(DUMBVM_STACKPAGES);
	// if (as->stack.pbase == 0) {
	// 	return ENOMEM;
	// }

	return 0;
}



int
as_complete_load(struct addrspace *as)
{

	(void)as;
	return 0;
}

int
as_define_stack(struct addrspace *as, vaddr_t *stackptr)
{

	int i = 0;
	struct page_entry *entry;

	for (i; i < DUMBVM_STACKPAGES; i++){
		entry = kmalloc(sizeof (struct page_entry));
		entry->valid = 0;
		entry->vAddr = USERSTACK - i*PAGE_SIZE; 
		array_add(as->pageTable, entry);
	}

	*stackptr = USERSTACK;
	return 0;
}
	

